#!/bin/sh
#
# Simple Redis init.d script conceived to work on Linux systems
# as it does use of the /proc filesystem.
#
# description: Redis is an in memory key-value store database
#
### BEGIN INIT INFO
# Provides: redis<%= @port %>
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Required-Start: <%= @required_start %>
# Required-Stop: <%= @required_stop %>
# Description: redis<%= @port %> init script
### END INIT INFO

REDISNAME=<%= @name %>
REDISPORT=<%= @port %>
<% case @platform %>
<% when 'ubuntu','debian','fedora' %>
EXEC="su -s /bin/sh -c '<%= File.join(@bin_path, 'redis-server') %> <%= @configdir %>/${REDISNAME}.conf' <%= @user %>"
<% else %>
EXEC="runuser <%= @user %> -c \"<%= File.join(@bin_path, 'redis-server') %> <%= @configdir %>/${REDISNAME}.conf\""
<% end %>
CLIEXEC=<%= File.join(@bin_path, 'redis-cli') %>

<% connection_string = String.new %>
<% if @unixsocket.nil? %>
  <% connection_string << " -p #{@port}" %>
  <% connection_string << " -h #{@address.respond_to?(:first) ? @address.first : @address }" if @address %>
<% else %>
  <% connection_string << " -s #{@unixsocket}" %>
<% end %>
<% connection_string  << " -a '#{@requirepass}'" unless @requirepass.nil? %>

PIDFILE=<%= @piddir %>/redis_${REDISNAME}.pid

PID=`ps -ef | grep 'redis' | grep ':6379' | awk '{print $2}'`

if [ ! -d <%= @piddir %> ]; then
    mkdir -p <%= @piddir %>
    chown <%= @user %>  <%= @piddir %>
fi

ulimit -n <%= @ulimit %>

case "$1" in
    status)
        if [ -f $PIDFILE ]
        then
          echo "redis$REDISNAME $PIDFILE exists, pid is $(cat $PIDFILE), should be running"
          ps -p $(cat $PIDFILE) >/dev/null 2>&1
          exit $?
        else
          echo "redis$REDISNAME $PIDFILE doesn't exist"
          exit 3
        fi
        ;;
    start)
        if [ X"$PID" = X ]
        then
            echo "Starting Redis server..."
            eval $EXEC
            PID=`ps -ef | grep 'redis' | grep ':6379' | awk '{print $2}'`
            echo $PID > $PIDFILE
        else
        	echo "process is already running"
            if [ ! -f "$PIDFILE" ];then
            	echo $PID > $PIDFILE
            fi
        fi
        ;;
    stop)
        if [ X"$PID" = X ]
        then
                echo "process is not running"
                echo "" > $PIDFILE
        else
                #PID=$(cat $PIDFILE)
                echo "Stopping ..."

                <%= "$CLIEXEC #{connection_string} save" if @shutdown_save %>
                $CLIEXEC <%= connection_string %> shutdown

                while [ -x /proc/${PID} ]
                do
                    echo "Waiting for Redis to shutdown ..."
                    sleep 1
                done
                echo "Redis stopped"
        fi
        ;;
    *)
        echo "Please use start or stop as first argument"
        ;;
esac
